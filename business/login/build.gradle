if (isModule.toBoolean()) { //集成模式 集成进入app
    apply plugin: 'com.android.library'
} else {                    //组件模式 单独运行
    apply plugin: 'com.android.application'
}
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        if (!isModule.toBoolean()) {
            applicationId "com.leelen.community.accout.login"
        }
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

//    dataBinding {
//        enabled = true
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(path: ':function:common')
    implementation project(path: ':corelibrary')
    annotationProcessor project(':zrouter:zrouter-compiler')

    //Jetpack相关
// android 架构组件
    def lifecycle_version = "1.1.1"

// ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

// alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version"
// use -ktx for Kotlin
// alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"

// alternatively - Lifecycles only (no ViewModel or LiveData).
//     Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_version"
// alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"

// optional - ReactiveStreams support for LiveData
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"

// optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$lifecycle_version"

    //BRVAH
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'
}
